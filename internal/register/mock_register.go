// Code generated by MockGen. DO NOT EDIT.
// Source: internal/register/register.go

// Package register is a generated GoMock package.
package register

import (
	models "parking/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegister is a mock of Register interface.
type MockRegister struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterMockRecorder
}

// MockRegisterMockRecorder is the mock recorder for MockRegister.
type MockRegisterMockRecorder struct {
	mock *MockRegister
}

// NewMockRegister creates a new mock instance.
func NewMockRegister(ctrl *gomock.Controller) *MockRegister {
	mock := &MockRegister{ctrl: ctrl}
	mock.recorder = &MockRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegister) EXPECT() *MockRegisterMockRecorder {
	return m.recorder
}

// EntryCar mocks base method.
func (m *MockRegister) EntryCar(plateNumber string) (models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntryCar", plateNumber)
	ret0, _ := ret[0].(models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EntryCar indicates an expected call of EntryCar.
func (mr *MockRegisterMockRecorder) EntryCar(plateNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntryCar", reflect.TypeOf((*MockRegister)(nil).EntryCar), plateNumber)
}

// ExitCar mocks base method.
func (m *MockRegister) ExitCar(plateNumber string) (models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitCar", plateNumber)
	ret0, _ := ret[0].(models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExitCar indicates an expected call of ExitCar.
func (mr *MockRegisterMockRecorder) ExitCar(plateNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitCar", reflect.TypeOf((*MockRegister)(nil).ExitCar), plateNumber)
}

// UpdateParking mocks base method.
func (m *MockRegister) UpdateParking() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParking")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateParking indicates an expected call of UpdateParking.
func (mr *MockRegisterMockRecorder) UpdateParking() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParking", reflect.TypeOf((*MockRegister)(nil).UpdateParking))
}
